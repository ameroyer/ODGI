============================================================== FOLD 09
Tensorflow version 1.10.1
ODGI - vedai_fold09, Input size 256

968 train samples (41 iters)
121 test samples (11 iters)

Config:
   [96mbatch_size:[0m 12
   [96mdata_classes:[0m ['camping car', 'car', 'others', 'pick-up', 'plane', 'ship', 'tractor', 'truck', 'van']
   [96mexp_name:[0m vedai_fold09
   [96mfeature_keys:[0m ['im_id', 'num_boxes', 'bounding_boxes', 'classes']
   [96mgpu_mem_frac:[0m 1.0
   [96mimage_folder:[0m /nfs/scistore12/chlgrp/aroyer/Datasets/VEDAI/Vehicules1024/
   [96mimage_format:[0m vedai
   [96mlearning_rate:[0m 0.001
   [96mnetwork:[0m tiny-yolov2
   [96mnum_classes:[0m 9
   [96mnum_epochs:[0m 600
   [96mnum_gpus:[0m 2
   [96msave_evaluation_steps:[0m 500
   [96msave_summaries_steps:[0m None
   [96msetting:[0m vedai_fold09
   [96mtest_max_num_bbs:[0m 19
   [96mtest_num_iters_per_epoch:[0m 11
   [96mtest_num_samples:[0m 121
   [96mtest_num_samples_per_iter:[0m 12
   [96mtest_tfrecords:[0m Data/vedai_fold09_test
   [96mtrain_max_num_bbs:[0m 19
   [96mtrain_num_iters_per_epoch:[0m 41
   [96mtrain_num_samples:[0m 968
   [96mtrain_num_samples_per_iter:[0m 24
   [96mtrain_tfrecords:[0m Data/vedai_fold09_train
   [96mval_max_num_bbs:[0m 19
   [96mval_num_samples:[0m 121
   [96mval_tfrecords:[0m Data/vedai_fold09_val
   using grid size [8 8]
   using grid size [2 2]

Graph:
    with default `num_threads` = 8
    with default `prefetch_capacity` = 1
    with default `with_classification` = False
    with default `shuffle_buffer` = 2000
    with default `data_augmentation_threshold` = 0.5
 [31m> load_inputs[0m
    [32mim_id[0m: shape=[None], dtype=<dtype: 'int32'>
    [32mimage[0m: shape=[None, 256, 256, 3], dtype=<dtype: 'float32'>
    [32mnum_boxes[0m: shape=[None], dtype=<dtype: 'int32'>
    [32mbounding_boxes[0m: shape=[None, 19, 4], dtype=<dtype: 'float32'>
    [32mobj_i_mask_bbs[0m: shape=[None, 8, 8, 1, 19], dtype=<dtype: 'float32'>
    [32mgroup_bounding_boxes_per_cell[0m: shape=[None, 8, 8, 1, 4], dtype=<dtype: 'float32'>
    [32mnum_group_boxes[0m: shape=[None], dtype=<dtype: 'int32'>
    [32mgroup_flags[0m: shape=[None, 8, 8, 1, 1], dtype=<dtype: 'float32'>
    [32mis_flipped[0m: shape=[None], dtype=<dtype: 'float32'>
 [31m> stage1[0m
    with default `weight_decay` = 0.0
    with default `normalizer_decay` = 0.9
    with default `with_classification` = False
    Output layer shape *(?, 8, 8, 1, 8)*
    with default `train_patch_confidence_threshold` = 0.0
    with default `train_patch_nms_threshold` = 1.0
    with default `train_num_crops` = 10
  > extracting 10 crops
    with default `target_conf_fn` = iou
    with default `centers_localization_loss_weight` = 1.0
    with default `scales_localization_loss_weight` = 1.0
    with default `confidence_loss_weight` = 5.0
    with default `noobj_confidence_loss_weight` = 1.0
    with default `group_classification_loss_weight` = 1.0
    with default `offsets_loss_weight` = 1.0
    with default `offsets_margin` = 0.025
    [32m*shifted_centers*[0m: shape=[None, 8, 8, 1, 2], dtype=<dtype: 'float32'>
    [32m*log_scales*[0m: shape=[None, 8, 8, 1, 2], dtype=<dtype: 'float32'>
    [32m*confidence_scores*[0m: shape=[None, 8, 8, 1, 1], dtype=<dtype: 'float32'>
    [32m*offsets*[0m: shape=[None, 8, 8, 1, 2], dtype=<dtype: 'float32'>
    [32m*group_classification_logits*[0m: shape=[None, 8, 8, 1, 1], dtype=<dtype: 'float32'>
    [32m*bounding_boxes*[0m: shape=[None, 8, 8, 1, 4], dtype=<dtype: 'float32'>
    [32m*detection_scores*[0m: shape=[None, 8, 8, 1, 1], dtype=<dtype: 'float32'>
    [32m*crop_boxes*[0m: shape=[None, 10, 4], dtype=<dtype: 'float32'>
    [32m*target_bounding_boxes*[0m: shape=[None, 8, 8, 1, 4], dtype=<dtype: 'float32'>
    [32m*target_bounding_boxes_rescaled*[0m: shape=[None, 8, 8, 1, 4], dtype=<dtype: 'float32'>
 > create stage 2 inputs:
    with default `patch_intersection_ratio_threshold` = 0.33
    with default `shuffle_buffer` = 2000
    with default `num_threads` = 8
    *im_id*: shape=[None], dtype=<dtype: 'int32'>
    *image*: shape=[None, 64, 64, 3], dtype=<dtype: 'float32'>
    *bounding_boxes*: shape=[None, 19, 4], dtype=<dtype: 'float32'>
    *num_boxes*: shape=[None], dtype=<dtype: 'int32'>
    *obj_i_mask_bbs*: shape=[None, 2, 2, 1, 19], dtype=<dtype: 'float32'>
 [31m> stage2[0m
    with default `weight_decay` = 0.0
    with default `normalizer_decay` = 0.9
    with default `with_classification` = False
    with default `with_group_flags` = False
    with default `with_offsets` = False
    Output layer shape *(?, 2, 2, 1, 5)*
    with default `target_conf_fn` = iou
    with default `assignment_reward_fn` = iou
    with default `centers_localization_loss_weight` = 1.0
    with default `scales_localization_loss_weight` = 1.0
    with default `confidence_loss_weight` = 5.0
    with default `noobj_confidence_loss_weight` = 1.0
    [32m*shifted_centers*[0m: shape=[None, 2, 2, 1, 2], dtype=<dtype: 'float32'>
    [32m*log_scales*[0m: shape=[None, 2, 2, 1, 2], dtype=<dtype: 'float32'>
    [32m*confidence_scores*[0m: shape=[None, 2, 2, 1, 1], dtype=<dtype: 'float32'>
    [32m*bounding_boxes*[0m: shape=[None, 2, 2, 1, 4], dtype=<dtype: 'float32'>
    [32m*detection_scores*[0m: shape=[None, 2, 2, 1, 1], dtype=<dtype: 'float32'>
    [32m*target_bounding_boxes*[0m: shape=[None, 2, 2, 1, 4], dtype=<dtype: 'float32'>

Losses:
 [31m> Collecting losses[0m (scopes: stage1, stage2)

    Scope stage1
        *stage1_centers_localization_loss*: 2 tensors
        *stage1_scales_localization_loss*: 2 tensors
        *stage1_confidence_obj_loss*: 2 tensors
        *stage1_confidence_noobj_loss*: 2 tensors
        *stage1_group_classification_loss*: 2 tensors
        *stage1_classification_loss*: 2 tensors
        *stage1_offsets_loss*: 2 tensors
        *stage2_centers_localization_loss*: 2 tensors
        *stage2_scales_localization_loss*: 2 tensors
        *stage2_confidence_obj_loss*: 2 tensors
        *stage2_confidence_noobj_loss*: 2 tensors
        *stage2_classification_loss*: 2 tensors
        stage1/tinyyolov2_net/conv1/weights:0, stage1/tinyyolov2_net/conv1/BatchNorm/beta:0, stage1/tinyyolov2_net/conv2/weights:0, stage1/tinyyolov2_net/conv2/BatchNorm/beta:0, stage1/tinyyolov2_net/conv3/weights:0, stage1/tinyyolov2_net/conv3/BatchNorm/beta:0, stage1/tinyyolov2_net/conv4/weights:0, stage1/tinyyolov2_net/conv4/BatchNorm/beta:0, stage1/tinyyolov2_net/conv5/weights:0, stage1/tinyyolov2_net/conv5/BatchNorm/beta:0, stage1/tinyyolov2_net/conv6/weights:0, stage1/tinyyolov2_net/conv6/BatchNorm/beta:0, stage1/tinyyolov2_net/conv7/weights:0, stage1/tinyyolov2_net/conv7/BatchNorm/beta:0, stage1/tinyyolov2_net/conv_out_2/weights:0, stage1/tinyyolov2_net/conv_out_2/BatchNorm/beta:0, stage1/yolov2_odgi_out/out_conv/kernel:0, stage1/yolov2_odgi_out/out_conv/bias:0

    Scope stage2
        *stage1_centers_localization_loss*: 2 tensors
        *stage1_scales_localization_loss*: 2 tensors
        *stage1_confidence_obj_loss*: 2 tensors
        *stage1_confidence_noobj_loss*: 2 tensors
        *stage1_group_classification_loss*: 2 tensors
        *stage1_classification_loss*: 2 tensors
        *stage1_offsets_loss*: 2 tensors
        *stage2_centers_localization_loss*: 2 tensors
        *stage2_scales_localization_loss*: 2 tensors
        *stage2_confidence_obj_loss*: 2 tensors
        *stage2_confidence_noobj_loss*: 2 tensors
        *stage2_classification_loss*: 2 tensors
        stage2/tinyyolov2_net/conv1/weights:0, stage2/tinyyolov2_net/conv1/BatchNorm/beta:0, stage2/tinyyolov2_net/conv2/weights:0, stage2/tinyyolov2_net/conv2/BatchNorm/beta:0, stage2/tinyyolov2_net/conv3/weights:0, stage2/tinyyolov2_net/conv3/BatchNorm/beta:0, stage2/tinyyolov2_net/conv4/weights:0, stage2/tinyyolov2_net/conv4/BatchNorm/beta:0, stage2/tinyyolov2_net/conv5/weights:0, stage2/tinyyolov2_net/conv5/BatchNorm/beta:0, stage2/tinyyolov2_net/conv6/weights:0, stage2/tinyyolov2_net/conv6/BatchNorm/beta:0, stage2/tinyyolov2_net/conv7/weights:0, stage2/tinyyolov2_net/conv7/BatchNorm/beta:0, stage2/tinyyolov2_net/conv_out_2/weights:0, stage2/tinyyolov2_net/conv_out_2/BatchNorm/beta:0, stage2/yolov2_odgi_out/out_conv/kernel:0, stage2/yolov2_odgi_out/out_conv/bias:0
 [31m> Build train operation[0m
    with default `optimizer` = ADAM
    Using optimizer ADAM with learning rate 1.00e-03
    with default `beta1` = 0.9
    64 update operations found

total graph size: 0.97 MB
    with default `base_log_dir` = ./log
    Log directory /nfs/scistore12/chlgrp/aroyer/Jupyter/ODGI/log/vedai_fold09/tiny-yolov2_odgi_256_64/10-05_14-32

Launch session:
    with default `max_to_keep` = 1
    with default `save_checkpoint_steps` = 2000
    [31mWarning:[0m No summaries found in collection "outputs"
    [31mWarning:[0m No summaries found in collection "config"
    saving checkpoint in [36m./log/vedai_fold09/tiny-yolov2_odgi_256_64/10-05_14-32[0m

Start training:
  > Step 1 (epoch 1): loss 1 = 10.67659, loss 2 = 10.99192
  > Step 251 (epoch 7): loss 1 = 0.83920, loss 2 = 0.52222
val eval at step 500: map@0.50 = 0.00343 - map@0.75 = 0.00138
  > Step 501 (epoch 13): loss 1 = 0.45814, loss 2 = 0.46233
  > Step 751 (epoch 19): loss 1 = 0.36639, loss 2 = 0.39070
val eval at step 1000: map@0.50 = 0.05855 - map@0.75 = 0.00000
  > Step 1001 (epoch 25): loss 1 = 0.33642, loss 2 = 0.41156
  > Step 1251 (epoch 32): loss 1 = 0.27013, loss 2 = 0.35771
val eval at step 1500: map@0.50 = 0.06095 - map@0.75 = 0.01230
  > Step 1501 (epoch 38): loss 1 = 0.21074, loss 2 = 0.38950
  > Step 1751 (epoch 44): loss 1 = 0.28867, loss 2 = 0.33681
val eval at step 2000: map@0.50 = 0.06643 - map@0.75 = 0.00083
  > Step 2001 (epoch 50): loss 1 = 0.36074, loss 2 = 0.34939
  > Step 2251 (epoch 56): loss 1 = 0.28656, loss 2 = 0.29383
val eval at step 2500: map@0.50 = 0.11626 - map@0.75 = 0.01706
  > Step 2501 (epoch 63): loss 1 = 0.21739, loss 2 = 0.21980
  > Step 2751 (epoch 69): loss 1 = 0.20526, loss 2 = 0.28149
val eval at step 3000: map@0.50 = 0.21417 - map@0.75 = 0.02499
  > Step 3001 (epoch 75): loss 1 = 0.21123, loss 2 = 0.30509
  > Step 3251 (epoch 81): loss 1 = 0.23251, loss 2 = 0.31349
val eval at step 3500: map@0.50 = 0.16754 - map@0.75 = 0.03465
  > Step 3501 (epoch 87): loss 1 = 0.30923, loss 2 = 0.31542
  > Step 3751 (epoch 94): loss 1 = 0.21908, loss 2 = 0.30748
val eval at step 4000: map@0.50 = 0.19847 - map@0.75 = 0.04307
  > Step 4001 (epoch 100): loss 1 = 0.18160, loss 2 = 0.27330
  > Step 4251 (epoch 106): loss 1 = 0.17907, loss 2 = 0.29915
val eval at step 4500: map@0.50 = 0.24353 - map@0.75 = 0.02868
  > Step 4501 (epoch 112): loss 1 = 0.24876, loss 2 = 0.27929
  > Step 4751 (epoch 118): loss 1 = 0.22907, loss 2 = 0.25885
val eval at step 5000: map@0.50 = 0.29174 - map@0.75 = 0.06253
  > Step 5001 (epoch 124): loss 1 = 0.15880, loss 2 = 0.25112
  > Step 5251 (epoch 131): loss 1 = 0.18053, loss 2 = 0.24572
val eval at step 5500: map@0.50 = 0.17270 - map@0.75 = 0.02088
  > Step 5501 (epoch 137): loss 1 = 0.41687, loss 2 = 0.30441
  > Step 5751 (epoch 143): loss 1 = 0.20215, loss 2 = 0.22411
val eval at step 6000: map@0.50 = 0.29757 - map@0.75 = 0.07191
  > Step 6001 (epoch 149): loss 1 = 0.16652, loss 2 = 0.21195
  > Step 6251 (epoch 155): loss 1 = 0.16861, loss 2 = 0.19485
val eval at step 6500: map@0.50 = 0.28899 - map@0.75 = 0.04942
  > Step 6501 (epoch 162): loss 1 = 0.18523, loss 2 = 0.19097
  > Step 6751 (epoch 168): loss 1 = 0.21574, loss 2 = 0.14314
val eval at step 7000: map@0.50 = 0.35847 - map@0.75 = 0.08256
  > Step 7001 (epoch 174): loss 1 = 0.13326, loss 2 = 0.21637
  > Step 7251 (epoch 180): loss 1 = 0.16418, loss 2 = 0.17345
val eval at step 7500: map@0.50 = 0.36347 - map@0.75 = 0.08912
  > Step 7501 (epoch 186): loss 1 = 0.16234, loss 2 = 0.17297
  > Step 7751 (epoch 193): loss 1 = 0.14844, loss 2 = 0.19536
val eval at step 8000: map@0.50 = 0.25068 - map@0.75 = 0.07442
  > Step 8001 (epoch 199): loss 1 = 0.38588, loss 2 = 0.23360
  > Step 8251 (epoch 205): loss 1 = 0.14589, loss 2 = 0.18564
val eval at step 8500: map@0.50 = 0.35675 - map@0.75 = 0.08901
  > Step 8501 (epoch 211): loss 1 = 0.16536, loss 2 = 0.16547
  > Step 8751 (epoch 217): loss 1 = 0.11047, loss 2 = 0.16110
val eval at step 9000: map@0.50 = 0.36886 - map@0.75 = 0.06724
  > Step 9001 (epoch 224): loss 1 = 0.11728, loss 2 = 0.16109
  > Step 9251 (epoch 230): loss 1 = 0.17014, loss 2 = 0.13771
val eval at step 9500: map@0.50 = 0.35467 - map@0.75 = 0.08983
  > Step 9501 (epoch 236): loss 1 = 0.10190, loss 2 = 0.12891
  > Step 9751 (epoch 242): loss 1 = 0.16627, loss 2 = 0.14986
val eval at step 10000: map@0.50 = 0.35581 - map@0.75 = 0.13486
  > Step 10001 (epoch 248): loss 1 = 0.13122, loss 2 = 0.13567
  > Step 10251 (epoch 255): loss 1 = 0.09627, loss 2 = 0.13436
val eval at step 10500: map@0.50 = 0.35192 - map@0.75 = 0.06176
  > Step 10501 (epoch 261): loss 1 = 0.11161, loss 2 = 0.15152
  > Step 10751 (epoch 267): loss 1 = 0.14510, loss 2 = 0.16432
val eval at step 11000: map@0.50 = 0.41960 - map@0.75 = 0.10426
  > Step 11001 (epoch 273): loss 1 = 0.12223, loss 2 = 0.16160
  > Step 11251 (epoch 279): loss 1 = 0.33744, loss 2 = 0.25648
val eval at step 11500: map@0.50 = 0.39114 - map@0.75 = 0.09563
  > Step 11501 (epoch 286): loss 1 = 0.17632, loss 2 = 0.17727
  > Step 11751 (epoch 292): loss 1 = 0.11405, loss 2 = 0.10585
val eval at step 12000: map@0.50 = 0.40174 - map@0.75 = 0.14622
  > Step 12001 (epoch 298): loss 1 = 0.13043, loss 2 = 0.14394
  > Step 12251 (epoch 304): loss 1 = 0.13930, loss 2 = 0.14404
val eval at step 12500: map@0.50 = 0.35860 - map@0.75 = 0.11724
  > Step 12501 (epoch 310): loss 1 = 0.10143, loss 2 = 0.15622
  > Step 12751 (epoch 317): loss 1 = 0.08358, loss 2 = 0.10816
val eval at step 13000: map@0.50 = 0.38085 - map@0.75 = 0.11322
  > Step 13001 (epoch 323): loss 1 = 0.09881, loss 2 = 0.10712
  > Step 13251 (epoch 329): loss 1 = 0.13415, loss 2 = 0.16501
val eval at step 13500: map@0.50 = 0.38825 - map@0.75 = 0.11862
  > Step 13501 (epoch 335): loss 1 = 0.07426, loss 2 = 0.14021
  > Step 13751 (epoch 341): loss 1 = 0.08876, loss 2 = 0.10274
val eval at step 14000: map@0.50 = 0.40170 - map@0.75 = 0.12331
  > Step 14001 (epoch 348): loss 1 = 0.08222, loss 2 = 0.10841
  > Step 14251 (epoch 354): loss 1 = 0.11231, loss 2 = 0.17979
val eval at step 14500: map@0.50 = 0.38317 - map@0.75 = 0.08720
  > Step 14501 (epoch 360): loss 1 = 0.07745, loss 2 = 0.14810
  > Step 14751 (epoch 366): loss 1 = 0.06867, loss 2 = 0.15567
val eval at step 15000: map@0.50 = 0.37756 - map@0.75 = 0.10804
  > Step 15001 (epoch 372): loss 1 = 0.10555, loss 2 = 0.11806
  > Step 15251 (epoch 379): loss 1 = 0.09489, loss 2 = 0.11911
val eval at step 15500: map@0.50 = 0.37645 - map@0.75 = 0.10728
  > Step 15501 (epoch 385): loss 1 = 0.12053, loss 2 = 0.08881
  > Step 15751 (epoch 391): loss 1 = 0.18714, loss 2 = 0.18744
val eval at step 16000: map@0.50 = 0.38446 - map@0.75 = 0.14409
  > Step 16001 (epoch 397): loss 1 = 0.13439, loss 2 = 0.12132
  > Step 16251 (epoch 403): loss 1 = 0.08293, loss 2 = 0.10296
val eval at step 16500: map@0.50 = 0.38930 - map@0.75 = 0.10086
  > Step 16501 (epoch 410): loss 1 = 0.04562, loss 2 = 0.10532
  > Step 16751 (epoch 416): loss 1 = 0.07335, loss 2 = 0.09073
val eval at step 17000: map@0.50 = 0.34841 - map@0.75 = 0.09364
  > Step 17001 (epoch 422): loss 1 = 0.08206, loss 2 = 0.07746
  > Step 17251 (epoch 428): loss 1 = 0.12093, loss 2 = 0.10662
val eval at step 17500: map@0.50 = 0.40004 - map@0.75 = 0.12884
  > Step 17501 (epoch 434): loss 1 = 0.11394, loss 2 = 0.09487
  > Step 17751 (epoch 441): loss 1 = 0.07583, loss 2 = 0.10693
val eval at step 18000: map@0.50 = 0.36250 - map@0.75 = 0.07761
  > Step 18001 (epoch 447): loss 1 = 0.10238, loss 2 = 0.08598
  > Step 18251 (epoch 453): loss 1 = 0.08604, loss 2 = 0.08960
val eval at step 18500: map@0.50 = 0.35556 - map@0.75 = 0.10006
  > Step 18501 (epoch 459): loss 1 = 0.10181, loss 2 = 0.08813
  > Step 18751 (epoch 465): loss 1 = 0.08662, loss 2 = 0.09558
val eval at step 19000: map@0.50 = 0.41223 - map@0.75 = 0.06592
  > Step 19001 (epoch 472): loss 1 = 0.09567, loss 2 = 0.08962
  > Step 19251 (epoch 478): loss 1 = 0.06364, loss 2 = 0.11821
val eval at step 19500: map@0.50 = 0.35973 - map@0.75 = 0.10456
  > Step 19501 (epoch 484): loss 1 = 0.08239, loss 2 = 0.11792
  > Step 19751 (epoch 490): loss 1 = 0.07100, loss 2 = 0.11932
val eval at step 20000: map@0.50 = 0.42520 - map@0.75 = 0.11920
  > Step 20001 (epoch 496): loss 1 = 0.07522, loss 2 = 0.06907
  > Step 20251 (epoch 503): loss 1 = 0.07254, loss 2 = 0.11227
val eval at step 20500: map@0.50 = 0.39762 - map@0.75 = 0.10615
  > Step 20501 (epoch 509): loss 1 = 0.12086, loss 2 = 0.08249
  > Step 20751 (epoch 515): loss 1 = 0.14945, loss 2 = 0.12143
val eval at step 21000: map@0.50 = 0.38240 - map@0.75 = 0.10911
  > Step 21001 (epoch 521): loss 1 = 0.10070, loss 2 = 0.09776
  > Step 21251 (epoch 527): loss 1 = 0.08022, loss 2 = 0.08140
val eval at step 21500: map@0.50 = 0.37090 - map@0.75 = 0.07557
  > Step 21501 (epoch 534): loss 1 = 0.06438, loss 2 = 0.08473
  > Step 21751 (epoch 540): loss 1 = 0.07514, loss 2 = 0.08877
val eval at step 22000: map@0.50 = 0.36004 - map@0.75 = 0.10150
  > Step 22001 (epoch 546): loss 1 = 0.08017, loss 2 = 0.08647
  > Step 22251 (epoch 552): loss 1 = 0.06502, loss 2 = 0.10391
val eval at step 22500: map@0.50 = 0.38488 - map@0.75 = 0.08810
  > Step 22501 (epoch 558): loss 1 = 0.08325, loss 2 = 0.07983
  > Step 22751 (epoch 565): loss 1 = 0.10867, loss 2 = 0.13060
val eval at step 23000: map@0.50 = 0.38437 - map@0.75 = 0.12898
  > Step 23001 (epoch 571): loss 1 = 0.09931, loss 2 = 0.10387
  > Step 23251 (epoch 577): loss 1 = 0.10344, loss 2 = 0.06813
val eval at step 23500: map@0.50 = 0.37969 - map@0.75 = 0.11526
  > Step 23501 (epoch 583): loss 1 = 0.07387, loss 2 = 0.11700
  > Step 23751 (epoch 589): loss 1 = 0.06236, loss 2 = 0.10498
val eval at step 24000: map@0.50 = 0.33424 - map@0.75 = 0.12009
  > Step 24001 (epoch 596): loss 1 = 0.10334, loss 2 = 0.10486
test eval at step 24200: map@0.50 = 0.40548 - map@0.75 = 0.14211
