============================================================== FOLD 10
Tensorflow version 1.10.1
ODGI - vedai_fold10, Input size 256

968 train samples (41 iters)
121 test samples (11 iters)

Config:
   [96mbatch_size:[0m 12
   [96mdata_classes:[0m ['camping car', 'car', 'others', 'pick-up', 'plane', 'ship', 'tractor', 'truck', 'van']
   [96mexp_name:[0m vedai_fold10
   [96mfeature_keys:[0m ['im_id', 'num_boxes', 'bounding_boxes', 'classes']
   [96mgpu_mem_frac:[0m 1.0
   [96mimage_folder:[0m /nfs/scistore12/chlgrp/aroyer/Datasets/VEDAI/Vehicules1024/
   [96mimage_format:[0m vedai
   [96mlearning_rate:[0m 0.001
   [96mnetwork:[0m tiny-yolov2
   [96mnum_classes:[0m 9
   [96mnum_epochs:[0m 600
   [96mnum_gpus:[0m 2
   [96msave_evaluation_steps:[0m 500
   [96msave_summaries_steps:[0m None
   [96msetting:[0m vedai_fold10
   [96mtest_max_num_bbs:[0m 19
   [96mtest_num_iters_per_epoch:[0m 11
   [96mtest_num_samples:[0m 121
   [96mtest_num_samples_per_iter:[0m 12
   [96mtest_tfrecords:[0m Data/vedai_fold10_test
   [96mtrain_max_num_bbs:[0m 19
   [96mtrain_num_iters_per_epoch:[0m 41
   [96mtrain_num_samples:[0m 968
   [96mtrain_num_samples_per_iter:[0m 24
   [96mtrain_tfrecords:[0m Data/vedai_fold10_train
   [96mval_max_num_bbs:[0m 19
   [96mval_num_samples:[0m 121
   [96mval_tfrecords:[0m Data/vedai_fold10_val
   using grid size [8 8]
   using grid size [2 2]

Graph:
    with default `num_threads` = 8
    with default `prefetch_capacity` = 1
    with default `with_classification` = False
    with default `shuffle_buffer` = 2000
    with default `data_augmentation_threshold` = 0.5
 [31m> load_inputs[0m
    [32mim_id[0m: shape=[None], dtype=<dtype: 'int32'>
    [32mimage[0m: shape=[None, 256, 256, 3], dtype=<dtype: 'float32'>
    [32mnum_boxes[0m: shape=[None], dtype=<dtype: 'int32'>
    [32mbounding_boxes[0m: shape=[None, 19, 4], dtype=<dtype: 'float32'>
    [32mobj_i_mask_bbs[0m: shape=[None, 8, 8, 1, 19], dtype=<dtype: 'float32'>
    [32mgroup_bounding_boxes_per_cell[0m: shape=[None, 8, 8, 1, 4], dtype=<dtype: 'float32'>
    [32mnum_group_boxes[0m: shape=[None], dtype=<dtype: 'int32'>
    [32mgroup_flags[0m: shape=[None, 8, 8, 1, 1], dtype=<dtype: 'float32'>
    [32mis_flipped[0m: shape=[None], dtype=<dtype: 'float32'>
 [31m> stage1[0m
    with default `weight_decay` = 0.0
    with default `normalizer_decay` = 0.9
    with default `with_classification` = False
    Output layer shape *(?, 8, 8, 1, 8)*
    with default `train_patch_confidence_threshold` = 0.0
    with default `train_patch_nms_threshold` = 1.0
    with default `train_num_crops` = 10
  > extracting 10 crops
    with default `target_conf_fn` = iou
    with default `centers_localization_loss_weight` = 1.0
    with default `scales_localization_loss_weight` = 1.0
    with default `confidence_loss_weight` = 5.0
    with default `noobj_confidence_loss_weight` = 1.0
    with default `group_classification_loss_weight` = 1.0
    with default `offsets_loss_weight` = 1.0
    with default `offsets_margin` = 0.025
    [32m*shifted_centers*[0m: shape=[None, 8, 8, 1, 2], dtype=<dtype: 'float32'>
    [32m*log_scales*[0m: shape=[None, 8, 8, 1, 2], dtype=<dtype: 'float32'>
    [32m*confidence_scores*[0m: shape=[None, 8, 8, 1, 1], dtype=<dtype: 'float32'>
    [32m*offsets*[0m: shape=[None, 8, 8, 1, 2], dtype=<dtype: 'float32'>
    [32m*group_classification_logits*[0m: shape=[None, 8, 8, 1, 1], dtype=<dtype: 'float32'>
    [32m*bounding_boxes*[0m: shape=[None, 8, 8, 1, 4], dtype=<dtype: 'float32'>
    [32m*detection_scores*[0m: shape=[None, 8, 8, 1, 1], dtype=<dtype: 'float32'>
    [32m*crop_boxes*[0m: shape=[None, 10, 4], dtype=<dtype: 'float32'>
    [32m*target_bounding_boxes*[0m: shape=[None, 8, 8, 1, 4], dtype=<dtype: 'float32'>
    [32m*target_bounding_boxes_rescaled*[0m: shape=[None, 8, 8, 1, 4], dtype=<dtype: 'float32'>
 > create stage 2 inputs:
    with default `patch_intersection_ratio_threshold` = 0.33
    with default `shuffle_buffer` = 2000
    with default `num_threads` = 8
    *im_id*: shape=[None], dtype=<dtype: 'int32'>
    *image*: shape=[None, 64, 64, 3], dtype=<dtype: 'float32'>
    *bounding_boxes*: shape=[None, 19, 4], dtype=<dtype: 'float32'>
    *num_boxes*: shape=[None], dtype=<dtype: 'int32'>
    *obj_i_mask_bbs*: shape=[None, 2, 2, 1, 19], dtype=<dtype: 'float32'>
 [31m> stage2[0m
    with default `weight_decay` = 0.0
    with default `normalizer_decay` = 0.9
    with default `with_classification` = False
    with default `with_group_flags` = False
    with default `with_offsets` = False
    Output layer shape *(?, 2, 2, 1, 5)*
    with default `target_conf_fn` = iou
    with default `assignment_reward_fn` = iou
    with default `centers_localization_loss_weight` = 1.0
    with default `scales_localization_loss_weight` = 1.0
    with default `confidence_loss_weight` = 5.0
    with default `noobj_confidence_loss_weight` = 1.0
    [32m*shifted_centers*[0m: shape=[None, 2, 2, 1, 2], dtype=<dtype: 'float32'>
    [32m*log_scales*[0m: shape=[None, 2, 2, 1, 2], dtype=<dtype: 'float32'>
    [32m*confidence_scores*[0m: shape=[None, 2, 2, 1, 1], dtype=<dtype: 'float32'>
    [32m*bounding_boxes*[0m: shape=[None, 2, 2, 1, 4], dtype=<dtype: 'float32'>
    [32m*detection_scores*[0m: shape=[None, 2, 2, 1, 1], dtype=<dtype: 'float32'>
    [32m*target_bounding_boxes*[0m: shape=[None, 2, 2, 1, 4], dtype=<dtype: 'float32'>

Losses:
 [31m> Collecting losses[0m (scopes: stage1, stage2)

    Scope stage1
        *stage1_centers_localization_loss*: 2 tensors
        *stage1_scales_localization_loss*: 2 tensors
        *stage1_confidence_obj_loss*: 2 tensors
        *stage1_confidence_noobj_loss*: 2 tensors
        *stage1_group_classification_loss*: 2 tensors
        *stage1_classification_loss*: 2 tensors
        *stage1_offsets_loss*: 2 tensors
        *stage2_centers_localization_loss*: 2 tensors
        *stage2_scales_localization_loss*: 2 tensors
        *stage2_confidence_obj_loss*: 2 tensors
        *stage2_confidence_noobj_loss*: 2 tensors
        *stage2_classification_loss*: 2 tensors
        stage1/tinyyolov2_net/conv1/weights:0, stage1/tinyyolov2_net/conv1/BatchNorm/beta:0, stage1/tinyyolov2_net/conv2/weights:0, stage1/tinyyolov2_net/conv2/BatchNorm/beta:0, stage1/tinyyolov2_net/conv3/weights:0, stage1/tinyyolov2_net/conv3/BatchNorm/beta:0, stage1/tinyyolov2_net/conv4/weights:0, stage1/tinyyolov2_net/conv4/BatchNorm/beta:0, stage1/tinyyolov2_net/conv5/weights:0, stage1/tinyyolov2_net/conv5/BatchNorm/beta:0, stage1/tinyyolov2_net/conv6/weights:0, stage1/tinyyolov2_net/conv6/BatchNorm/beta:0, stage1/tinyyolov2_net/conv7/weights:0, stage1/tinyyolov2_net/conv7/BatchNorm/beta:0, stage1/tinyyolov2_net/conv_out_2/weights:0, stage1/tinyyolov2_net/conv_out_2/BatchNorm/beta:0, stage1/yolov2_odgi_out/out_conv/kernel:0, stage1/yolov2_odgi_out/out_conv/bias:0

    Scope stage2
        *stage1_centers_localization_loss*: 2 tensors
        *stage1_scales_localization_loss*: 2 tensors
        *stage1_confidence_obj_loss*: 2 tensors
        *stage1_confidence_noobj_loss*: 2 tensors
        *stage1_group_classification_loss*: 2 tensors
        *stage1_classification_loss*: 2 tensors
        *stage1_offsets_loss*: 2 tensors
        *stage2_centers_localization_loss*: 2 tensors
        *stage2_scales_localization_loss*: 2 tensors
        *stage2_confidence_obj_loss*: 2 tensors
        *stage2_confidence_noobj_loss*: 2 tensors
        *stage2_classification_loss*: 2 tensors
        stage2/tinyyolov2_net/conv1/weights:0, stage2/tinyyolov2_net/conv1/BatchNorm/beta:0, stage2/tinyyolov2_net/conv2/weights:0, stage2/tinyyolov2_net/conv2/BatchNorm/beta:0, stage2/tinyyolov2_net/conv3/weights:0, stage2/tinyyolov2_net/conv3/BatchNorm/beta:0, stage2/tinyyolov2_net/conv4/weights:0, stage2/tinyyolov2_net/conv4/BatchNorm/beta:0, stage2/tinyyolov2_net/conv5/weights:0, stage2/tinyyolov2_net/conv5/BatchNorm/beta:0, stage2/tinyyolov2_net/conv6/weights:0, stage2/tinyyolov2_net/conv6/BatchNorm/beta:0, stage2/tinyyolov2_net/conv7/weights:0, stage2/tinyyolov2_net/conv7/BatchNorm/beta:0, stage2/tinyyolov2_net/conv_out_2/weights:0, stage2/tinyyolov2_net/conv_out_2/BatchNorm/beta:0, stage2/yolov2_odgi_out/out_conv/kernel:0, stage2/yolov2_odgi_out/out_conv/bias:0
 [31m> Build train operation[0m
    with default `optimizer` = ADAM
    Using optimizer ADAM with learning rate 1.00e-03
    with default `beta1` = 0.9
    64 update operations found

total graph size: 0.97 MB
    with default `base_log_dir` = ./log
    Log directory /nfs/scistore12/chlgrp/aroyer/Jupyter/ODGI/log/vedai_fold10/tiny-yolov2_odgi_256_64/10-05_14-32

Launch session:
    with default `max_to_keep` = 1
    with default `save_checkpoint_steps` = 2000
    [31mWarning:[0m No summaries found in collection "outputs"
    [31mWarning:[0m No summaries found in collection "config"
    saving checkpoint in [36m./log/vedai_fold10/tiny-yolov2_odgi_256_64/10-05_14-32[0m

Start training:
  > Step 1 (epoch 1): loss 1 = 6.29310, loss 2 = 12.29705
  > Step 251 (epoch 7): loss 1 = 0.78219, loss 2 = 0.51034
val eval at step 500: map@0.50 = 0.01377 - map@0.75 = 0.00023
  > Step 501 (epoch 13): loss 1 = 0.51974, loss 2 = 0.52545
  > Step 751 (epoch 19): loss 1 = 0.43765, loss 2 = 0.40310
val eval at step 1000: map@0.50 = 0.03468 - map@0.75 = 0.00000
  > Step 1001 (epoch 25): loss 1 = 0.30373, loss 2 = 0.33820
  > Step 1251 (epoch 32): loss 1 = 0.24886, loss 2 = 0.35903
val eval at step 1500: map@0.50 = 0.12720 - map@0.75 = 0.01116
  > Step 1501 (epoch 38): loss 1 = 0.29983, loss 2 = 0.34705
  > Step 1751 (epoch 44): loss 1 = 0.26730, loss 2 = 0.35001
val eval at step 2000: map@0.50 = 0.18737 - map@0.75 = 0.02271
  > Step 2001 (epoch 50): loss 1 = 0.28820, loss 2 = 0.34619
  > Step 2251 (epoch 56): loss 1 = 0.23220, loss 2 = 0.31128
val eval at step 2500: map@0.50 = 0.19942 - map@0.75 = 0.00978
  > Step 2501 (epoch 63): loss 1 = 0.20125, loss 2 = 0.31391
  > Step 2751 (epoch 69): loss 1 = 0.27935, loss 2 = 0.39473
val eval at step 3000: map@0.50 = 0.24828 - map@0.75 = 0.03821
  > Step 3001 (epoch 75): loss 1 = 0.18166, loss 2 = 0.29172
  > Step 3251 (epoch 81): loss 1 = 0.23317, loss 2 = 0.23883
val eval at step 3500: map@0.50 = 0.12862 - map@0.75 = 0.01033
  > Step 3501 (epoch 87): loss 1 = 0.33904, loss 2 = 0.35046
  > Step 3751 (epoch 94): loss 1 = 0.27544, loss 2 = 0.28836
val eval at step 4000: map@0.50 = 0.27301 - map@0.75 = 0.01692
  > Step 4001 (epoch 100): loss 1 = 0.20930, loss 2 = 0.27746
  > Step 4251 (epoch 106): loss 1 = 0.19968, loss 2 = 0.24272
val eval at step 4500: map@0.50 = 0.30309 - map@0.75 = 0.05166
  > Step 4501 (epoch 112): loss 1 = 0.16127, loss 2 = 0.25756
  > Step 4751 (epoch 118): loss 1 = 0.21730, loss 2 = 0.27955
val eval at step 5000: map@0.50 = 0.27939 - map@0.75 = 0.04105
  > Step 5001 (epoch 124): loss 1 = 0.16628, loss 2 = 0.18701
  > Step 5251 (epoch 131): loss 1 = 0.26480, loss 2 = 0.27294
val eval at step 5500: map@0.50 = 0.26088 - map@0.75 = 0.02120
  > Step 5501 (epoch 137): loss 1 = 0.21037, loss 2 = 0.30135
  > Step 5751 (epoch 143): loss 1 = 0.20504, loss 2 = 0.26114
val eval at step 6000: map@0.50 = 0.32857 - map@0.75 = 0.04895
  > Step 6001 (epoch 149): loss 1 = 0.18531, loss 2 = 0.26476
  > Step 6251 (epoch 155): loss 1 = 0.20041, loss 2 = 0.20243
val eval at step 6500: map@0.50 = 0.36790 - map@0.75 = 0.10045
  > Step 6501 (epoch 162): loss 1 = 0.16332, loss 2 = 0.23077
  > Step 6751 (epoch 168): loss 1 = 0.12727, loss 2 = 0.20578
val eval at step 7000: map@0.50 = 0.31443 - map@0.75 = 0.05839
  > Step 7001 (epoch 174): loss 1 = 0.19960, loss 2 = 0.18888
  > Step 7251 (epoch 180): loss 1 = 0.15934, loss 2 = 0.16045
val eval at step 7500: map@0.50 = 0.35199 - map@0.75 = 0.08487
  > Step 7501 (epoch 186): loss 1 = 0.23840, loss 2 = 0.25848
  > Step 7751 (epoch 193): loss 1 = 0.18799, loss 2 = 0.21213
val eval at step 8000: map@0.50 = 0.40948 - map@0.75 = 0.10456
  > Step 8001 (epoch 199): loss 1 = 0.18261, loss 2 = 0.17957
  > Step 8251 (epoch 205): loss 1 = 0.15293, loss 2 = 0.19547
val eval at step 8500: map@0.50 = 0.38222 - map@0.75 = 0.14278
  > Step 8501 (epoch 211): loss 1 = 0.11764, loss 2 = 0.21339
  > Step 8751 (epoch 217): loss 1 = 0.14372, loss 2 = 0.17990
val eval at step 9000: map@0.50 = 0.43296 - map@0.75 = 0.12101
  > Step 9001 (epoch 224): loss 1 = 0.16134, loss 2 = 0.20490
  > Step 9251 (epoch 230): loss 1 = 0.12763, loss 2 = 0.17595
val eval at step 9500: map@0.50 = 0.40047 - map@0.75 = 0.15538
  > Step 9501 (epoch 236): loss 1 = 0.11489, loss 2 = 0.14792
  > Step 9751 (epoch 242): loss 1 = 0.12561, loss 2 = 0.13413
val eval at step 10000: map@0.50 = 0.41080 - map@0.75 = 0.10160
  > Step 10001 (epoch 248): loss 1 = 0.12793, loss 2 = 0.16662
  > Step 10251 (epoch 255): loss 1 = 0.16035, loss 2 = 0.15828
val eval at step 10500: map@0.50 = 0.37946 - map@0.75 = 0.11310
  > Step 10501 (epoch 261): loss 1 = 0.19471, loss 2 = 0.14169
  > Step 10751 (epoch 267): loss 1 = 0.14981, loss 2 = 0.13966
val eval at step 11000: map@0.50 = 0.40469 - map@0.75 = 0.12236
  > Step 11001 (epoch 273): loss 1 = 0.12672, loss 2 = 0.12839
  > Step 11251 (epoch 279): loss 1 = 0.12264, loss 2 = 0.15212
val eval at step 11500: map@0.50 = 0.42998 - map@0.75 = 0.12719
  > Step 11501 (epoch 286): loss 1 = 0.10958, loss 2 = 0.16073
  > Step 11751 (epoch 292): loss 1 = 0.10269, loss 2 = 0.14145
val eval at step 12000: map@0.50 = 0.39054 - map@0.75 = 0.15657
  > Step 12001 (epoch 298): loss 1 = 0.08341, loss 2 = 0.12682
  > Step 12251 (epoch 304): loss 1 = 0.13594, loss 2 = 0.20648
val eval at step 12500: map@0.50 = 0.38342 - map@0.75 = 0.13905
  > Step 12501 (epoch 310): loss 1 = 0.09427, loss 2 = 0.13445
  > Step 12751 (epoch 317): loss 1 = 0.11070, loss 2 = 0.11118
val eval at step 13000: map@0.50 = 0.40806 - map@0.75 = 0.09409
  > Step 13001 (epoch 323): loss 1 = 0.14605, loss 2 = 0.14495
  > Step 13251 (epoch 329): loss 1 = 0.17117, loss 2 = 0.15096
val eval at step 13500: map@0.50 = 0.44164 - map@0.75 = 0.09697
  > Step 13501 (epoch 335): loss 1 = 0.11795, loss 2 = 0.10282
  > Step 13751 (epoch 341): loss 1 = 0.08052, loss 2 = 0.11281
val eval at step 14000: map@0.50 = 0.42660 - map@0.75 = 0.14454
  > Step 14001 (epoch 348): loss 1 = 0.12665, loss 2 = 0.10945
  > Step 14251 (epoch 354): loss 1 = 0.30761, loss 2 = 0.17174
val eval at step 14500: map@0.50 = 0.42359 - map@0.75 = 0.10723
  > Step 14501 (epoch 360): loss 1 = 0.15426, loss 2 = 0.16384
  > Step 14751 (epoch 366): loss 1 = 0.09696, loss 2 = 0.16900
val eval at step 15000: map@0.50 = 0.45436 - map@0.75 = 0.13610
  > Step 15001 (epoch 372): loss 1 = 0.08359, loss 2 = 0.13956
  > Step 15251 (epoch 379): loss 1 = 0.08699, loss 2 = 0.17029
val eval at step 15500: map@0.50 = 0.37201 - map@0.75 = 0.15452
  > Step 15501 (epoch 385): loss 1 = 0.07033, loss 2 = 0.10007
  > Step 15751 (epoch 391): loss 1 = 0.08081, loss 2 = 0.11995
val eval at step 16000: map@0.50 = 0.42964 - map@0.75 = 0.13334
  > Step 16001 (epoch 397): loss 1 = 0.07698, loss 2 = 0.11814
  > Step 16251 (epoch 403): loss 1 = 0.07885, loss 2 = 0.11730
val eval at step 16500: map@0.50 = 0.43808 - map@0.75 = 0.14213
  > Step 16501 (epoch 410): loss 1 = 0.07663, loss 2 = 0.16502
  > Step 16751 (epoch 416): loss 1 = 0.13956, loss 2 = 0.08271
val eval at step 17000: map@0.50 = 0.39804 - map@0.75 = 0.12619
  > Step 17001 (epoch 422): loss 1 = 0.10922, loss 2 = 0.09966
  > Step 17251 (epoch 428): loss 1 = 0.10895, loss 2 = 0.12361
val eval at step 17500: map@0.50 = 0.40063 - map@0.75 = 0.11632
  > Step 17501 (epoch 434): loss 1 = 0.08068, loss 2 = 0.10615
  > Step 17751 (epoch 441): loss 1 = 0.07480, loss 2 = 0.11402
val eval at step 18000: map@0.50 = 0.39030 - map@0.75 = 0.13913
  > Step 18001 (epoch 447): loss 1 = 0.09212, loss 2 = 0.10598
  > Step 18251 (epoch 453): loss 1 = 0.05868, loss 2 = 0.10703
val eval at step 18500: map@0.50 = 0.40051 - map@0.75 = 0.16136
  > Step 18501 (epoch 459): loss 1 = 0.09641, loss 2 = 0.10457
  > Step 18751 (epoch 465): loss 1 = 0.07229, loss 2 = 0.10069
val eval at step 19000: map@0.50 = 0.43126 - map@0.75 = 0.15979
  > Step 19001 (epoch 472): loss 1 = 0.10349, loss 2 = 0.08595
  > Step 19251 (epoch 478): loss 1 = 0.14296, loss 2 = 0.14506
val eval at step 19500: map@0.50 = 0.42640 - map@0.75 = 0.18757
  > Step 19501 (epoch 484): loss 1 = 0.09437, loss 2 = 0.13412
  > Step 19751 (epoch 490): loss 1 = 0.08579, loss 2 = 0.08534
val eval at step 20000: map@0.50 = 0.40928 - map@0.75 = 0.13330
  > Step 20001 (epoch 496): loss 1 = 0.07265, loss 2 = 0.10665
  > Step 20251 (epoch 503): loss 1 = 0.05213, loss 2 = 0.09256
val eval at step 20500: map@0.50 = 0.39770 - map@0.75 = 0.13220
  > Step 20501 (epoch 509): loss 1 = 0.05368, loss 2 = 0.07501
  > Step 20751 (epoch 515): loss 1 = 0.05337, loss 2 = 0.12039
val eval at step 21000: map@0.50 = 0.40200 - map@0.75 = 0.11219
  > Step 21001 (epoch 521): loss 1 = 0.06862, loss 2 = 0.09450
  > Step 21251 (epoch 527): loss 1 = 0.06671, loss 2 = 0.09552
val eval at step 21500: map@0.50 = 0.41733 - map@0.75 = 0.11723
  > Step 21501 (epoch 534): loss 1 = 0.07217, loss 2 = 0.08261
  > Step 21751 (epoch 540): loss 1 = 0.11175, loss 2 = 0.08329
val eval at step 22000: map@0.50 = 0.43241 - map@0.75 = 0.12202
  > Step 22001 (epoch 546): loss 1 = 0.08004, loss 2 = 0.08607
  > Step 22251 (epoch 552): loss 1 = 0.07858, loss 2 = 0.06759
val eval at step 22500: map@0.50 = 0.43062 - map@0.75 = 0.15669
  > Step 22501 (epoch 558): loss 1 = 0.06398, loss 2 = 0.10000
  > Step 22751 (epoch 565): loss 1 = 0.06763, loss 2 = 0.06768
val eval at step 23000: map@0.50 = 0.37992 - map@0.75 = 0.12325
  > Step 23001 (epoch 571): loss 1 = 0.06596, loss 2 = 0.10605
  > Step 23251 (epoch 577): loss 1 = 0.08125, loss 2 = 0.08282
val eval at step 23500: map@0.50 = 0.45118 - map@0.75 = 0.14489
  > Step 23501 (epoch 583): loss 1 = 0.09228, loss 2 = 0.06411
  > Step 23751 (epoch 589): loss 1 = 0.09561, loss 2 = 0.07821
val eval at step 24000: map@0.50 = 0.42845 - map@0.75 = 0.13982
  > Step 24001 (epoch 596): loss 1 = 0.08266, loss 2 = 0.10241
test eval at step 24200: map@0.50 = 0.41881 - map@0.75 = 0.16185
