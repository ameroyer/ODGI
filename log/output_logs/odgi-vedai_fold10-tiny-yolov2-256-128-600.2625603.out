============================================================== FOLD 10
Tensorflow version 1.10.1
ODGI - vedai_fold10, Input size 256

968 train samples (41 iters)
121 test samples (11 iters)

Config:
   [96mbatch_size:[0m 12
   [96mdata_classes:[0m ['camping car', 'car', 'others', 'pick-up', 'plane', 'ship', 'tractor', 'truck', 'van']
   [96mexp_name:[0m vedai_fold10
   [96mfeature_keys:[0m ['im_id', 'num_boxes', 'bounding_boxes', 'classes']
   [96mgpu_mem_frac:[0m 1.0
   [96mimage_folder:[0m /nfs/scistore12/chlgrp/aroyer/Datasets/VEDAI/Vehicules1024/
   [96mimage_format:[0m vedai
   [96mlearning_rate:[0m 0.001
   [96mnetwork:[0m tiny-yolov2
   [96mnum_classes:[0m 9
   [96mnum_epochs:[0m 600
   [96mnum_gpus:[0m 2
   [96msave_evaluation_steps:[0m 500
   [96msave_summaries_steps:[0m None
   [96msetting:[0m vedai_fold10
   [96mtest_max_num_bbs:[0m 19
   [96mtest_num_iters_per_epoch:[0m 11
   [96mtest_num_samples:[0m 121
   [96mtest_num_samples_per_iter:[0m 12
   [96mtest_tfrecords:[0m Data/vedai_fold10_test
   [96mtrain_max_num_bbs:[0m 19
   [96mtrain_num_iters_per_epoch:[0m 41
   [96mtrain_num_samples:[0m 968
   [96mtrain_num_samples_per_iter:[0m 24
   [96mtrain_tfrecords:[0m Data/vedai_fold10_train
   [96mval_max_num_bbs:[0m 19
   [96mval_num_samples:[0m 121
   [96mval_tfrecords:[0m Data/vedai_fold10_val
   using grid size [8 8]
   using grid size [4 4]

Graph:
    with default `num_threads` = 8
    with default `prefetch_capacity` = 1
    with default `with_classification` = False
    with default `shuffle_buffer` = 2000
    with default `data_augmentation_threshold` = 0.5
 [31m> load_inputs[0m
    [32mim_id[0m: shape=[None], dtype=<dtype: 'int32'>
    [32mimage[0m: shape=[None, 256, 256, 3], dtype=<dtype: 'float32'>
    [32mnum_boxes[0m: shape=[None], dtype=<dtype: 'int32'>
    [32mbounding_boxes[0m: shape=[None, 19, 4], dtype=<dtype: 'float32'>
    [32mobj_i_mask_bbs[0m: shape=[None, 8, 8, 1, 19], dtype=<dtype: 'float32'>
    [32mgroup_bounding_boxes_per_cell[0m: shape=[None, 8, 8, 1, 4], dtype=<dtype: 'float32'>
    [32mnum_group_boxes[0m: shape=[None], dtype=<dtype: 'int32'>
    [32mgroup_flags[0m: shape=[None, 8, 8, 1, 1], dtype=<dtype: 'float32'>
    [32mis_flipped[0m: shape=[None], dtype=<dtype: 'float32'>
 [31m> stage1[0m
    with default `weight_decay` = 0.0
    with default `normalizer_decay` = 0.9
    with default `with_classification` = False
    Output layer shape *(?, 8, 8, 1, 8)*
    with default `train_patch_confidence_threshold` = 0.0
    with default `train_patch_nms_threshold` = 1.0
    with default `train_num_crops` = 10
  > extracting 10 crops
    with default `target_conf_fn` = iou
    with default `centers_localization_loss_weight` = 1.0
    with default `scales_localization_loss_weight` = 1.0
    with default `confidence_loss_weight` = 5.0
    with default `noobj_confidence_loss_weight` = 1.0
    with default `group_classification_loss_weight` = 1.0
    with default `offsets_loss_weight` = 1.0
    with default `offsets_margin` = 0.025
    [32m*confidence_scores*[0m: shape=[None, 8, 8, 1, 1], dtype=<dtype: 'float32'>
    [32m*detection_scores*[0m: shape=[None, 8, 8, 1, 1], dtype=<dtype: 'float32'>
    [32m*shifted_centers*[0m: shape=[None, 8, 8, 1, 2], dtype=<dtype: 'float32'>
    [32m*log_scales*[0m: shape=[None, 8, 8, 1, 2], dtype=<dtype: 'float32'>
    [32m*bounding_boxes*[0m: shape=[None, 8, 8, 1, 4], dtype=<dtype: 'float32'>
    [32m*offsets*[0m: shape=[None, 8, 8, 1, 2], dtype=<dtype: 'float32'>
    [32m*group_classification_logits*[0m: shape=[None, 8, 8, 1, 1], dtype=<dtype: 'float32'>
    [32m*crop_boxes*[0m: shape=[None, 10, 4], dtype=<dtype: 'float32'>
    [32m*crop_boxes_confidences*[0m: shape=[None, 10], dtype=<dtype: 'float32'>
    [32m*target_bounding_boxes*[0m: shape=[None, 8, 8, 1, 4], dtype=<dtype: 'float32'>
    [32m*target_bounding_boxes_rescaled*[0m: shape=[None, 8, 8, 1, 4], dtype=<dtype: 'float32'>
 > create stage 2 inputs:
    with default `patch_intersection_ratio_threshold` = 0.33
    with default `shuffle_buffer` = 2000
    with default `num_threads` = 8
    *im_id*: shape=[None], dtype=<dtype: 'int32'>
    *image*: shape=[None, 128, 128, 3], dtype=<dtype: 'float32'>
    *bounding_boxes*: shape=[None, 19, 4], dtype=<dtype: 'float32'>
    *num_boxes*: shape=[None], dtype=<dtype: 'int32'>
    *obj_i_mask_bbs*: shape=[None, 4, 4, 1, 19], dtype=<dtype: 'float32'>
 [31m> stage2[0m
    with default `weight_decay` = 0.0
    with default `normalizer_decay` = 0.9
    with default `with_classification` = False
    with default `with_group_flags` = False
    with default `with_offsets` = False
    Output layer shape *(?, 4, 4, 1, 5)*
    with default `target_conf_fn` = iou
    with default `assignment_reward_fn` = iou
    with default `centers_localization_loss_weight` = 1.0
    with default `scales_localization_loss_weight` = 1.0
    with default `confidence_loss_weight` = 5.0
    with default `noobj_confidence_loss_weight` = 1.0
    [32m*confidence_scores*[0m: shape=[None, 4, 4, 1, 1], dtype=<dtype: 'float32'>
    [32m*detection_scores*[0m: shape=[None, 4, 4, 1, 1], dtype=<dtype: 'float32'>
    [32m*shifted_centers*[0m: shape=[None, 4, 4, 1, 2], dtype=<dtype: 'float32'>
    [32m*log_scales*[0m: shape=[None, 4, 4, 1, 2], dtype=<dtype: 'float32'>
    [32m*bounding_boxes*[0m: shape=[None, 4, 4, 1, 4], dtype=<dtype: 'float32'>
    [32m*target_bounding_boxes*[0m: shape=[None, 4, 4, 1, 4], dtype=<dtype: 'float32'>

Losses:
 [31m> Collecting losses[0m (scopes: stage1, stage2)

    Scope stage1
        *stage1_centers_localization_loss*: 2 tensors
        *stage1_scales_localization_loss*: 2 tensors
        *stage1_confidence_obj_loss*: 2 tensors
        *stage1_confidence_noobj_loss*: 2 tensors
        *stage1_group_classification_loss*: 2 tensors
        *stage1_classification_loss*: 2 tensors
        *stage1_offsets_loss*: 2 tensors
        *stage2_centers_localization_loss*: 2 tensors
        *stage2_scales_localization_loss*: 2 tensors
        *stage2_confidence_obj_loss*: 2 tensors
        *stage2_confidence_noobj_loss*: 2 tensors
        *stage2_classification_loss*: 2 tensors
        stage1/tinyyolov2_net/conv1/weights:0, stage1/tinyyolov2_net/conv1/BatchNorm/beta:0, stage1/tinyyolov2_net/conv2/weights:0, stage1/tinyyolov2_net/conv2/BatchNorm/beta:0, stage1/tinyyolov2_net/conv3/weights:0, stage1/tinyyolov2_net/conv3/BatchNorm/beta:0, stage1/tinyyolov2_net/conv4/weights:0, stage1/tinyyolov2_net/conv4/BatchNorm/beta:0, stage1/tinyyolov2_net/conv5/weights:0, stage1/tinyyolov2_net/conv5/BatchNorm/beta:0, stage1/tinyyolov2_net/conv6/weights:0, stage1/tinyyolov2_net/conv6/BatchNorm/beta:0, stage1/tinyyolov2_net/conv7/weights:0, stage1/tinyyolov2_net/conv7/BatchNorm/beta:0, stage1/tinyyolov2_net/conv_out_2/weights:0, stage1/tinyyolov2_net/conv_out_2/BatchNorm/beta:0, stage1/yolov2_odgi_out/out_conv/kernel:0, stage1/yolov2_odgi_out/out_conv/bias:0

    Scope stage2
        *stage1_centers_localization_loss*: 2 tensors
        *stage1_scales_localization_loss*: 2 tensors
        *stage1_confidence_obj_loss*: 2 tensors
        *stage1_confidence_noobj_loss*: 2 tensors
        *stage1_group_classification_loss*: 2 tensors
        *stage1_classification_loss*: 2 tensors
        *stage1_offsets_loss*: 2 tensors
        *stage2_centers_localization_loss*: 2 tensors
        *stage2_scales_localization_loss*: 2 tensors
        *stage2_confidence_obj_loss*: 2 tensors
        *stage2_confidence_noobj_loss*: 2 tensors
        *stage2_classification_loss*: 2 tensors
        stage2/tinyyolov2_net/conv1/weights:0, stage2/tinyyolov2_net/conv1/BatchNorm/beta:0, stage2/tinyyolov2_net/conv2/weights:0, stage2/tinyyolov2_net/conv2/BatchNorm/beta:0, stage2/tinyyolov2_net/conv3/weights:0, stage2/tinyyolov2_net/conv3/BatchNorm/beta:0, stage2/tinyyolov2_net/conv4/weights:0, stage2/tinyyolov2_net/conv4/BatchNorm/beta:0, stage2/tinyyolov2_net/conv5/weights:0, stage2/tinyyolov2_net/conv5/BatchNorm/beta:0, stage2/tinyyolov2_net/conv6/weights:0, stage2/tinyyolov2_net/conv6/BatchNorm/beta:0, stage2/tinyyolov2_net/conv7/weights:0, stage2/tinyyolov2_net/conv7/BatchNorm/beta:0, stage2/tinyyolov2_net/conv_out_2/weights:0, stage2/tinyyolov2_net/conv_out_2/BatchNorm/beta:0, stage2/yolov2_odgi_out/out_conv/kernel:0, stage2/yolov2_odgi_out/out_conv/bias:0
 [31m> Build train operation[0m
    with default `optimizer` = ADAM
    Using optimizer ADAM with learning rate 1.00e-03
    with default `beta1` = 0.9
    64 update operations found

total graph size: 0.98 MB
    with default `base_log_dir` = ./log
    Log directory /nfs/scistore12/chlgrp/aroyer/Jupyter/ODGI/log/vedai_fold10/tiny-yolov2_odgi_256_128/09-28_16-43

Launch session:
    with default `max_to_keep` = 1
    with default `save_checkpoint_steps` = 2000
    [31mWarning:[0m No summaries found in collection "outputs"
    [31mWarning:[0m No summaries found in collection "config"
    saving checkpoint in [36m./log/vedai_fold10/tiny-yolov2_odgi_256_128/09-28_16-43[0m

Start training:
  > Step 1 (epoch 1): loss 1 = 9.37422, loss 2 = 4.27288
  > Step 251 (epoch 7): loss 1 = 0.75354, loss 2 = 0.61809
val eval at step 500: map@0.50 = 0.02279 - map@0.75 = 0.00000
  > Step 501 (epoch 13): loss 1 = 0.64554, loss 2 = 0.52177
  > Step 751 (epoch 19): loss 1 = 0.31329, loss 2 = 0.48227
val eval at step 1000: map@0.50 = 0.09676 - map@0.75 = 0.00826
  > Step 1001 (epoch 25): loss 1 = 0.35941, loss 2 = 0.58748
  > Step 1251 (epoch 32): loss 1 = 0.24585, loss 2 = 0.50707
val eval at step 1500: map@0.50 = 0.24087 - map@0.75 = 0.03427
  > Step 1501 (epoch 38): loss 1 = 0.20008, loss 2 = 0.28073
  > Step 1751 (epoch 44): loss 1 = 0.25696, loss 2 = 0.39650
val eval at step 2000: map@0.50 = 0.18879 - map@0.75 = 0.01761
  > Step 2001 (epoch 50): loss 1 = 0.32586, loss 2 = 0.42596
  > Step 2251 (epoch 56): loss 1 = 0.27032, loss 2 = 0.43149
val eval at step 2500: map@0.50 = 0.26778 - map@0.75 = 0.03730
  > Step 2501 (epoch 63): loss 1 = 0.23259, loss 2 = 0.34169
  > Step 2751 (epoch 69): loss 1 = 0.21691, loss 2 = 0.32411
val eval at step 3000: map@0.50 = 0.39113 - map@0.75 = 0.07942
  > Step 3001 (epoch 75): loss 1 = 0.24022, loss 2 = 0.31528
  > Step 3251 (epoch 81): loss 1 = 0.28234, loss 2 = 0.40249
val eval at step 3500: map@0.50 = 0.20549 - map@0.75 = 0.04822
  > Step 3501 (epoch 87): loss 1 = 0.30103, loss 2 = 0.29794
  > Step 3751 (epoch 94): loss 1 = 0.28710, loss 2 = 0.32995
val eval at step 4000: map@0.50 = 0.32784 - map@0.75 = 0.06506
  > Step 4001 (epoch 100): loss 1 = 0.18607, loss 2 = 0.30580
  > Step 4251 (epoch 106): loss 1 = 0.22252, loss 2 = 0.32857
val eval at step 4500: map@0.50 = 0.38994 - map@0.75 = 0.12407
  > Step 4501 (epoch 112): loss 1 = 0.18639, loss 2 = 0.26766
  > Step 4751 (epoch 118): loss 1 = 0.17356, loss 2 = 0.32622
val eval at step 5000: map@0.50 = 0.45389 - map@0.75 = 0.07701
  > Step 5001 (epoch 124): loss 1 = 0.23651, loss 2 = 0.27172
  > Step 5251 (epoch 131): loss 1 = 0.41862, loss 2 = 0.36772
val eval at step 5500: map@0.50 = 0.43421 - map@0.75 = 0.13676
  > Step 5501 (epoch 137): loss 1 = 0.24623, loss 2 = 0.24896
  > Step 5751 (epoch 143): loss 1 = 0.14531, loss 2 = 0.25956
val eval at step 6000: map@0.50 = 0.43174 - map@0.75 = 0.15137
  > Step 6001 (epoch 149): loss 1 = 0.15049, loss 2 = 0.26110
  > Step 6251 (epoch 155): loss 1 = 0.19042, loss 2 = 0.25508
val eval at step 6500: map@0.50 = 0.44367 - map@0.75 = 0.13524
  > Step 6501 (epoch 162): loss 1 = 0.14885, loss 2 = 0.23599
  > Step 6751 (epoch 168): loss 1 = 0.14553, loss 2 = 0.23504
val eval at step 7000: map@0.50 = 0.47789 - map@0.75 = 0.09979
  > Step 7001 (epoch 174): loss 1 = 0.13155, loss 2 = 0.21171
  > Step 7251 (epoch 180): loss 1 = 0.15684, loss 2 = 0.27747
val eval at step 7500: map@0.50 = 0.47072 - map@0.75 = 0.13680
  > Step 7501 (epoch 186): loss 1 = 0.15659, loss 2 = 0.21648
  > Step 7751 (epoch 193): loss 1 = 0.16767, loss 2 = 0.21362
val eval at step 8000: map@0.50 = 0.49575 - map@0.75 = 0.19919
  > Step 8001 (epoch 199): loss 1 = 0.16289, loss 2 = 0.20539
  > Step 8251 (epoch 205): loss 1 = 0.35216, loss 2 = 0.35636
val eval at step 8500: map@0.50 = 0.44561 - map@0.75 = 0.15519
  > Step 8501 (epoch 211): loss 1 = 0.17237, loss 2 = 0.29757
  > Step 8751 (epoch 217): loss 1 = 0.13734, loss 2 = 0.24463
val eval at step 9000: map@0.50 = 0.49352 - map@0.75 = 0.19251
  > Step 9001 (epoch 224): loss 1 = 0.17095, loss 2 = 0.22689
  > Step 9251 (epoch 230): loss 1 = 0.08650, loss 2 = 0.24314
val eval at step 9500: map@0.50 = 0.49816 - map@0.75 = 0.20570
  > Step 9501 (epoch 236): loss 1 = 0.12540, loss 2 = 0.27561
  > Step 9751 (epoch 242): loss 1 = 0.14402, loss 2 = 0.22714
val eval at step 10000: map@0.50 = 0.51376 - map@0.75 = 0.12427
  > Step 10001 (epoch 248): loss 1 = 0.10657, loss 2 = 0.24881
  > Step 10251 (epoch 255): loss 1 = 0.08760, loss 2 = 0.19048
val eval at step 10500: map@0.50 = 0.51147 - map@0.75 = 0.14184
  > Step 10501 (epoch 261): loss 1 = 0.14628, loss 2 = 0.27123
  > Step 10751 (epoch 267): loss 1 = 0.13329, loss 2 = 0.22270
val eval at step 11000: map@0.50 = 0.51262 - map@0.75 = 0.17823
  > Step 11001 (epoch 273): loss 1 = 0.14869, loss 2 = 0.26890
  > Step 11251 (epoch 279): loss 1 = 0.19247, loss 2 = 0.20890
val eval at step 11500: map@0.50 = 0.51772 - map@0.75 = 0.23499
  > Step 11501 (epoch 286): loss 1 = 0.11613, loss 2 = 0.19734
  > Step 11751 (epoch 292): loss 1 = 0.11172, loss 2 = 0.15581
val eval at step 12000: map@0.50 = 0.49927 - map@0.75 = 0.18130
  > Step 12001 (epoch 298): loss 1 = 0.09615, loss 2 = 0.21321
  > Step 12251 (epoch 304): loss 1 = 0.08692, loss 2 = 0.22413
val eval at step 12500: map@0.50 = 0.53744 - map@0.75 = 0.22959
  > Step 12501 (epoch 310): loss 1 = 0.10553, loss 2 = 0.18541
  > Step 12751 (epoch 317): loss 1 = 0.09306, loss 2 = 0.18822
val eval at step 13000: map@0.50 = 0.52082 - map@0.75 = 0.22224
  > Step 13001 (epoch 323): loss 1 = 0.10205, loss 2 = 0.18635
  > Step 13251 (epoch 329): loss 1 = 0.07469, loss 2 = 0.19496
val eval at step 13500: map@0.50 = 0.51168 - map@0.75 = 0.19991
  > Step 13501 (epoch 335): loss 1 = 0.15243, loss 2 = 0.19328
  > Step 13751 (epoch 341): loss 1 = 0.12137, loss 2 = 0.19417
val eval at step 14000: map@0.50 = 0.52411 - map@0.75 = 0.17544
  > Step 14001 (epoch 348): loss 1 = 0.11928, loss 2 = 0.18357
  > Step 14251 (epoch 354): loss 1 = 0.10881, loss 2 = 0.14468
val eval at step 14500: map@0.50 = 0.49917 - map@0.75 = 0.17549
  > Step 14501 (epoch 360): loss 1 = 0.09044, loss 2 = 0.26853
  > Step 14751 (epoch 366): loss 1 = 0.19269, loss 2 = 0.23211
val eval at step 15000: map@0.50 = 0.54328 - map@0.75 = 0.26386
  > Step 15001 (epoch 372): loss 1 = 0.18338, loss 2 = 0.18970
  > Step 15251 (epoch 379): loss 1 = 0.10661, loss 2 = 0.21607
val eval at step 15500: map@0.50 = 0.51844 - map@0.75 = 0.23515
  > Step 15501 (epoch 385): loss 1 = 0.10199, loss 2 = 0.17227
  > Step 15751 (epoch 391): loss 1 = 0.06635, loss 2 = 0.23946
val eval at step 16000: map@0.50 = 0.47594 - map@0.75 = 0.23388
  > Step 16001 (epoch 397): loss 1 = 0.08308, loss 2 = 0.13936
  > Step 16251 (epoch 403): loss 1 = 0.09081, loss 2 = 0.15447
val eval at step 16500: map@0.50 = 0.49864 - map@0.75 = 0.18797
  > Step 16501 (epoch 410): loss 1 = 0.08149, loss 2 = 0.16407
  > Step 16751 (epoch 416): loss 1 = 0.06807, loss 2 = 0.17813
val eval at step 17000: map@0.50 = 0.55788 - map@0.75 = 0.23109
  > Step 17001 (epoch 422): loss 1 = 0.08896, loss 2 = 0.20090
  > Step 17251 (epoch 428): loss 1 = 0.11574, loss 2 = 0.14729
val eval at step 17500: map@0.50 = 0.49511 - map@0.75 = 0.19749
  > Step 17501 (epoch 434): loss 1 = 0.11059, loss 2 = 0.17641
  > Step 17751 (epoch 441): loss 1 = 0.10076, loss 2 = 0.18397
val eval at step 18000: map@0.50 = 0.46837 - map@0.75 = 0.17301
  > Step 18001 (epoch 447): loss 1 = 0.09452, loss 2 = 0.18152
  > Step 18251 (epoch 453): loss 1 = 0.10003, loss 2 = 0.18093
val eval at step 18500: map@0.50 = 0.53467 - map@0.75 = 0.25876
  > Step 18501 (epoch 459): loss 1 = 0.09630, loss 2 = 0.17314
  > Step 18751 (epoch 465): loss 1 = 0.22197, loss 2 = 0.21915
val eval at step 19000: map@0.50 = 0.52663 - map@0.75 = 0.23560
  > Step 19001 (epoch 472): loss 1 = 0.08587, loss 2 = 0.17527
  > Step 19251 (epoch 478): loss 1 = 0.11093, loss 2 = 0.16380
val eval at step 19500: map@0.50 = 0.52331 - map@0.75 = 0.22058
  > Step 19501 (epoch 484): loss 1 = 0.08074, loss 2 = 0.21316
  > Step 19751 (epoch 490): loss 1 = 0.07904, loss 2 = 0.14248
val eval at step 20000: map@0.50 = 0.51770 - map@0.75 = 0.21171
  > Step 20001 (epoch 496): loss 1 = 0.09572, loss 2 = 0.14991
  > Step 20251 (epoch 503): loss 1 = 0.06706, loss 2 = 0.16033
val eval at step 20500: map@0.50 = 0.50687 - map@0.75 = 0.24575
  > Step 20501 (epoch 509): loss 1 = 0.09358, loss 2 = 0.14948
  > Step 20751 (epoch 515): loss 1 = 0.08212, loss 2 = 0.19767
val eval at step 21000: map@0.50 = 0.52820 - map@0.75 = 0.21033
  > Step 21001 (epoch 521): loss 1 = 0.08658, loss 2 = 0.15640
  > Step 21251 (epoch 527): loss 1 = 0.07077, loss 2 = 0.16721
val eval at step 21500: map@0.50 = 0.47621 - map@0.75 = 0.15668
  > Step 21501 (epoch 534): loss 1 = 0.09283, loss 2 = 0.15605
  > Step 21751 (epoch 540): loss 1 = 0.09265, loss 2 = 0.14974
val eval at step 22000: map@0.50 = 0.46574 - map@0.75 = 0.21655
  > Step 22001 (epoch 546): loss 1 = 0.15765, loss 2 = 0.17748
  > Step 22251 (epoch 552): loss 1 = 0.09186, loss 2 = 0.17063
val eval at step 22500: map@0.50 = 0.52626 - map@0.75 = 0.19093
  > Step 22501 (epoch 558): loss 1 = 0.07851, loss 2 = 0.19415
  > Step 22751 (epoch 565): loss 1 = 0.09716, loss 2 = 0.21720
val eval at step 23000: map@0.50 = 0.51397 - map@0.75 = 0.25547
  > Step 23001 (epoch 571): loss 1 = 0.07309, loss 2 = 0.13719
  > Step 23251 (epoch 577): loss 1 = 0.08122, loss 2 = 0.15192
val eval at step 23500: map@0.50 = 0.55609 - map@0.75 = 0.21029
  > Step 23501 (epoch 583): loss 1 = 0.09182, loss 2 = 0.17348
  > Step 23751 (epoch 589): loss 1 = 0.09093, loss 2 = 0.17907
val eval at step 24000: map@0.50 = 0.52662 - map@0.75 = 0.24326
  > Step 24001 (epoch 596): loss 1 = 0.05933, loss 2 = 0.16212
test eval at step 24200: map@0.50 = 0.45632 - map@0.75 = 0.18713
