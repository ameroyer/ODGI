============================================================== FOLD 05
Tensorflow version 1.10.1
ODGI - vedai_fold05, Input size 256

968 train samples (41 iters)
121 test samples (11 iters)

Config:
   [96mbatch_size:[0m 12
   [96mdata_classes:[0m ['camping car', 'car', 'others', 'pick-up', 'plane', 'ship', 'tractor', 'truck', 'van']
   [96mexp_name:[0m vedai_fold05
   [96mfeature_keys:[0m ['im_id', 'num_boxes', 'bounding_boxes', 'classes']
   [96mgpu_mem_frac:[0m 1.0
   [96mimage_folder:[0m /nfs/scistore12/chlgrp/aroyer/Datasets/VEDAI/Vehicules1024/
   [96mimage_format:[0m vedai
   [96mlearning_rate:[0m 0.001
   [96mnetwork:[0m tiny-yolov2
   [96mnum_classes:[0m 9
   [96mnum_epochs:[0m 600
   [96mnum_gpus:[0m 2
   [96msave_evaluation_steps:[0m 500
   [96msave_summaries_steps:[0m None
   [96msetting:[0m vedai_fold05
   [96mtest_max_num_bbs:[0m 19
   [96mtest_num_iters_per_epoch:[0m 11
   [96mtest_num_samples:[0m 121
   [96mtest_num_samples_per_iter:[0m 12
   [96mtest_tfrecords:[0m Data/vedai_fold05_test
   [96mtrain_max_num_bbs:[0m 19
   [96mtrain_num_iters_per_epoch:[0m 41
   [96mtrain_num_samples:[0m 968
   [96mtrain_num_samples_per_iter:[0m 24
   [96mtrain_tfrecords:[0m Data/vedai_fold05_train
   [96mval_max_num_bbs:[0m 19
   [96mval_num_samples:[0m 121
   [96mval_tfrecords:[0m Data/vedai_fold05_val
   using grid size [8 8]
   using grid size [2 2]

Graph:
    with default `num_threads` = 8
    with default `prefetch_capacity` = 1
    with default `with_classification` = False
    with default `shuffle_buffer` = 2000
    with default `data_augmentation_threshold` = 0.5
 [31m> load_inputs[0m
    [32mim_id[0m: shape=[None], dtype=<dtype: 'int32'>
    [32mimage[0m: shape=[None, 256, 256, 3], dtype=<dtype: 'float32'>
    [32mnum_boxes[0m: shape=[None], dtype=<dtype: 'int32'>
    [32mbounding_boxes[0m: shape=[None, 19, 4], dtype=<dtype: 'float32'>
    [32mobj_i_mask_bbs[0m: shape=[None, 8, 8, 1, 19], dtype=<dtype: 'float32'>
    [32mgroup_bounding_boxes_per_cell[0m: shape=[None, 8, 8, 1, 4], dtype=<dtype: 'float32'>
    [32mnum_group_boxes[0m: shape=[None], dtype=<dtype: 'int32'>
    [32mgroup_flags[0m: shape=[None, 8, 8, 1, 1], dtype=<dtype: 'float32'>
    [32mis_flipped[0m: shape=[None], dtype=<dtype: 'float32'>
 [31m> stage1[0m
    with default `weight_decay` = 0.0
    with default `normalizer_decay` = 0.9
    with default `with_classification` = False
    Output layer shape *(?, 8, 8, 1, 8)*
    with default `train_patch_confidence_threshold` = 0.0
    with default `train_patch_nms_threshold` = 1.0
    with default `train_num_crops` = 10
  > extracting 10 crops
    with default `target_conf_fn` = iou
    with default `centers_localization_loss_weight` = 1.0
    with default `scales_localization_loss_weight` = 1.0
    with default `confidence_loss_weight` = 5.0
    with default `noobj_confidence_loss_weight` = 1.0
    with default `group_classification_loss_weight` = 1.0
    with default `offsets_loss_weight` = 1.0
    with default `offsets_margin` = 0.025
    [32m*shifted_centers*[0m: shape=[None, 8, 8, 1, 2], dtype=<dtype: 'float32'>
    [32m*log_scales*[0m: shape=[None, 8, 8, 1, 2], dtype=<dtype: 'float32'>
    [32m*confidence_scores*[0m: shape=[None, 8, 8, 1, 1], dtype=<dtype: 'float32'>
    [32m*offsets*[0m: shape=[None, 8, 8, 1, 2], dtype=<dtype: 'float32'>
    [32m*group_classification_logits*[0m: shape=[None, 8, 8, 1, 1], dtype=<dtype: 'float32'>
    [32m*bounding_boxes*[0m: shape=[None, 8, 8, 1, 4], dtype=<dtype: 'float32'>
    [32m*detection_scores*[0m: shape=[None, 8, 8, 1, 1], dtype=<dtype: 'float32'>
    [32m*crop_boxes*[0m: shape=[None, 10, 4], dtype=<dtype: 'float32'>
    [32m*target_bounding_boxes*[0m: shape=[None, 8, 8, 1, 4], dtype=<dtype: 'float32'>
    [32m*target_bounding_boxes_rescaled*[0m: shape=[None, 8, 8, 1, 4], dtype=<dtype: 'float32'>
 > create stage 2 inputs:
    with default `patch_intersection_ratio_threshold` = 0.33
    with default `shuffle_buffer` = 2000
    with default `num_threads` = 8
    *im_id*: shape=[None], dtype=<dtype: 'int32'>
    *image*: shape=[None, 64, 64, 3], dtype=<dtype: 'float32'>
    *bounding_boxes*: shape=[None, 19, 4], dtype=<dtype: 'float32'>
    *num_boxes*: shape=[None], dtype=<dtype: 'int32'>
    *obj_i_mask_bbs*: shape=[None, 2, 2, 1, 19], dtype=<dtype: 'float32'>
 [31m> stage2[0m
    with default `weight_decay` = 0.0
    with default `normalizer_decay` = 0.9
    with default `with_classification` = False
    with default `with_group_flags` = False
    with default `with_offsets` = False
    Output layer shape *(?, 2, 2, 1, 5)*
    with default `target_conf_fn` = iou
    with default `assignment_reward_fn` = iou
    with default `centers_localization_loss_weight` = 1.0
    with default `scales_localization_loss_weight` = 1.0
    with default `confidence_loss_weight` = 5.0
    with default `noobj_confidence_loss_weight` = 1.0
    [32m*shifted_centers*[0m: shape=[None, 2, 2, 1, 2], dtype=<dtype: 'float32'>
    [32m*log_scales*[0m: shape=[None, 2, 2, 1, 2], dtype=<dtype: 'float32'>
    [32m*confidence_scores*[0m: shape=[None, 2, 2, 1, 1], dtype=<dtype: 'float32'>
    [32m*bounding_boxes*[0m: shape=[None, 2, 2, 1, 4], dtype=<dtype: 'float32'>
    [32m*detection_scores*[0m: shape=[None, 2, 2, 1, 1], dtype=<dtype: 'float32'>
    [32m*target_bounding_boxes*[0m: shape=[None, 2, 2, 1, 4], dtype=<dtype: 'float32'>

Losses:
 [31m> Collecting losses[0m (scopes: stage1, stage2)

    Scope stage1
        *stage1_centers_localization_loss*: 2 tensors
        *stage1_scales_localization_loss*: 2 tensors
        *stage1_confidence_obj_loss*: 2 tensors
        *stage1_confidence_noobj_loss*: 2 tensors
        *stage1_group_classification_loss*: 2 tensors
        *stage1_classification_loss*: 2 tensors
        *stage1_offsets_loss*: 2 tensors
        *stage2_centers_localization_loss*: 2 tensors
        *stage2_scales_localization_loss*: 2 tensors
        *stage2_confidence_obj_loss*: 2 tensors
        *stage2_confidence_noobj_loss*: 2 tensors
        *stage2_classification_loss*: 2 tensors
        stage1/tinyyolov2_net/conv1/weights:0, stage1/tinyyolov2_net/conv1/BatchNorm/beta:0, stage1/tinyyolov2_net/conv2/weights:0, stage1/tinyyolov2_net/conv2/BatchNorm/beta:0, stage1/tinyyolov2_net/conv3/weights:0, stage1/tinyyolov2_net/conv3/BatchNorm/beta:0, stage1/tinyyolov2_net/conv4/weights:0, stage1/tinyyolov2_net/conv4/BatchNorm/beta:0, stage1/tinyyolov2_net/conv5/weights:0, stage1/tinyyolov2_net/conv5/BatchNorm/beta:0, stage1/tinyyolov2_net/conv6/weights:0, stage1/tinyyolov2_net/conv6/BatchNorm/beta:0, stage1/tinyyolov2_net/conv7/weights:0, stage1/tinyyolov2_net/conv7/BatchNorm/beta:0, stage1/tinyyolov2_net/conv_out_2/weights:0, stage1/tinyyolov2_net/conv_out_2/BatchNorm/beta:0, stage1/yolov2_odgi_out/out_conv/kernel:0, stage1/yolov2_odgi_out/out_conv/bias:0

    Scope stage2
        *stage1_centers_localization_loss*: 2 tensors
        *stage1_scales_localization_loss*: 2 tensors
        *stage1_confidence_obj_loss*: 2 tensors
        *stage1_confidence_noobj_loss*: 2 tensors
        *stage1_group_classification_loss*: 2 tensors
        *stage1_classification_loss*: 2 tensors
        *stage1_offsets_loss*: 2 tensors
        *stage2_centers_localization_loss*: 2 tensors
        *stage2_scales_localization_loss*: 2 tensors
        *stage2_confidence_obj_loss*: 2 tensors
        *stage2_confidence_noobj_loss*: 2 tensors
        *stage2_classification_loss*: 2 tensors
        stage2/tinyyolov2_net/conv1/weights:0, stage2/tinyyolov2_net/conv1/BatchNorm/beta:0, stage2/tinyyolov2_net/conv2/weights:0, stage2/tinyyolov2_net/conv2/BatchNorm/beta:0, stage2/tinyyolov2_net/conv3/weights:0, stage2/tinyyolov2_net/conv3/BatchNorm/beta:0, stage2/tinyyolov2_net/conv4/weights:0, stage2/tinyyolov2_net/conv4/BatchNorm/beta:0, stage2/tinyyolov2_net/conv5/weights:0, stage2/tinyyolov2_net/conv5/BatchNorm/beta:0, stage2/tinyyolov2_net/conv6/weights:0, stage2/tinyyolov2_net/conv6/BatchNorm/beta:0, stage2/tinyyolov2_net/conv7/weights:0, stage2/tinyyolov2_net/conv7/BatchNorm/beta:0, stage2/tinyyolov2_net/conv_out_2/weights:0, stage2/tinyyolov2_net/conv_out_2/BatchNorm/beta:0, stage2/yolov2_odgi_out/out_conv/kernel:0, stage2/yolov2_odgi_out/out_conv/bias:0
 [31m> Build train operation[0m
    with default `optimizer` = ADAM
    Using optimizer ADAM with learning rate 1.00e-03
    with default `beta1` = 0.9
    64 update operations found

total graph size: 0.97 MB
    with default `base_log_dir` = ./log
    Log directory /nfs/scistore12/chlgrp/aroyer/Jupyter/ODGI/log/vedai_fold05/tiny-yolov2_odgi_256_64/10-06_23-45

Launch session:
    with default `max_to_keep` = 1
    with default `save_checkpoint_steps` = 2000
    [31mWarning:[0m No summaries found in collection "outputs"
    [31mWarning:[0m No summaries found in collection "config"
    saving checkpoint in [36m./log/vedai_fold05/tiny-yolov2_odgi_256_64/10-06_23-45[0m

Start training:
  > Step 1 (epoch 1): loss 1 = 5.05596, loss 2 = 7.09670
  > Step 251 (epoch 7): loss 1 = 0.80380, loss 2 = 0.65582
val eval at step 500: map@0.50 = 0.03558 - map@0.75 = 0.00138
  > Step 501 (epoch 13): loss 1 = 0.58479, loss 2 = 0.49764
  > Step 751 (epoch 19): loss 1 = 0.35857, loss 2 = 0.37037
val eval at step 1000: map@0.50 = 0.06371 - map@0.75 = 0.00689
  > Step 1001 (epoch 25): loss 1 = 0.33057, loss 2 = 0.47079
  > Step 1251 (epoch 32): loss 1 = 0.25283, loss 2 = 0.39149
val eval at step 1500: map@0.50 = 0.13907 - map@0.75 = 0.00829
  > Step 1501 (epoch 38): loss 1 = 0.26870, loss 2 = 0.41880
  > Step 1751 (epoch 44): loss 1 = 0.19403, loss 2 = 0.43342
val eval at step 2000: map@0.50 = 0.17262 - map@0.75 = 0.02239
  > Step 2001 (epoch 50): loss 1 = 0.44861, loss 2 = 0.33852
  > Step 2251 (epoch 56): loss 1 = 0.24524, loss 2 = 0.28682
val eval at step 2500: map@0.50 = 0.18873 - map@0.75 = 0.04674
  > Step 2501 (epoch 63): loss 1 = 0.19665, loss 2 = 0.32513
  > Step 2751 (epoch 69): loss 1 = 0.19833, loss 2 = 0.29990
val eval at step 3000: map@0.50 = 0.28798 - map@0.75 = 0.08375
  > Step 3001 (epoch 75): loss 1 = 0.21240, loss 2 = 0.27817
  > Step 3251 (epoch 81): loss 1 = 0.20652, loss 2 = 0.32901
val eval at step 3500: map@0.50 = 0.21845 - map@0.75 = 0.03252
  > Step 3501 (epoch 87): loss 1 = 0.21864, loss 2 = 0.28609
  > Step 3751 (epoch 94): loss 1 = 0.27058, loss 2 = 0.36702
val eval at step 4000: map@0.50 = 0.26286 - map@0.75 = 0.03567
  > Step 4001 (epoch 100): loss 1 = 0.29653, loss 2 = 0.25527
  > Step 4251 (epoch 106): loss 1 = 0.22536, loss 2 = 0.28634
val eval at step 4500: map@0.50 = 0.25915 - map@0.75 = 0.06321
  > Step 4501 (epoch 112): loss 1 = 0.24841, loss 2 = 0.22503
  > Step 4751 (epoch 118): loss 1 = 0.20147, loss 2 = 0.23996
val eval at step 5000: map@0.50 = 0.33664 - map@0.75 = 0.05099
  > Step 5001 (epoch 124): loss 1 = 0.17104, loss 2 = 0.29474
  > Step 5251 (epoch 131): loss 1 = 0.17659, loss 2 = 0.20255
val eval at step 5500: map@0.50 = 0.29502 - map@0.75 = 0.07624
  > Step 5501 (epoch 137): loss 1 = 0.18847, loss 2 = 0.23895
  > Step 5751 (epoch 143): loss 1 = 0.25313, loss 2 = 0.22097
val eval at step 6000: map@0.50 = 0.37386 - map@0.75 = 0.11166
  > Step 6001 (epoch 149): loss 1 = 0.17869, loss 2 = 0.20391
  > Step 6251 (epoch 155): loss 1 = 0.16909, loss 2 = 0.21630
val eval at step 6500: map@0.50 = 0.37618 - map@0.75 = 0.06820
  > Step 6501 (epoch 162): loss 1 = 0.13259, loss 2 = 0.19860
  > Step 6751 (epoch 168): loss 1 = 0.15012, loss 2 = 0.26075
val eval at step 7000: map@0.50 = 0.34370 - map@0.75 = 0.08226
  > Step 7001 (epoch 174): loss 1 = 0.18253, loss 2 = 0.14035
  > Step 7251 (epoch 180): loss 1 = 0.18377, loss 2 = 0.22341
val eval at step 7500: map@0.50 = 0.35528 - map@0.75 = 0.07802
  > Step 7501 (epoch 186): loss 1 = 0.19703, loss 2 = 0.20259
  > Step 7751 (epoch 193): loss 1 = 0.16811, loss 2 = 0.18264
val eval at step 8000: map@0.50 = 0.36960 - map@0.75 = 0.09010
  > Step 8001 (epoch 199): loss 1 = 0.12705, loss 2 = 0.16400
  > Step 8251 (epoch 205): loss 1 = 0.21405, loss 2 = 0.26996
val eval at step 8500: map@0.50 = 0.37655 - map@0.75 = 0.13862
  > Step 8501 (epoch 211): loss 1 = 0.17681, loss 2 = 0.21757
  > Step 8751 (epoch 217): loss 1 = 0.12303, loss 2 = 0.16516
val eval at step 9000: map@0.50 = 0.41153 - map@0.75 = 0.11001
  > Step 9001 (epoch 224): loss 1 = 0.14186, loss 2 = 0.16760
  > Step 9251 (epoch 230): loss 1 = 0.10400, loss 2 = 0.12154
val eval at step 9500: map@0.50 = 0.41619 - map@0.75 = 0.12085
  > Step 9501 (epoch 236): loss 1 = 0.12351, loss 2 = 0.12776
  > Step 9751 (epoch 242): loss 1 = 0.10175, loss 2 = 0.20403
val eval at step 10000: map@0.50 = 0.42059 - map@0.75 = 0.15132
  > Step 10001 (epoch 248): loss 1 = 0.10536, loss 2 = 0.17553
  > Step 10251 (epoch 255): loss 1 = 0.12758, loss 2 = 0.17416
val eval at step 10500: map@0.50 = 0.42277 - map@0.75 = 0.11582
  > Step 10501 (epoch 261): loss 1 = 0.12364, loss 2 = 0.16759
  > Step 10751 (epoch 267): loss 1 = 0.11439, loss 2 = 0.16645
val eval at step 11000: map@0.50 = 0.36443 - map@0.75 = 0.10155
  > Step 11001 (epoch 273): loss 1 = 0.14648, loss 2 = 0.13138
  > Step 11251 (epoch 279): loss 1 = 0.20785, loss 2 = 0.14708
val eval at step 11500: map@0.50 = 0.39993 - map@0.75 = 0.11181
  > Step 11501 (epoch 286): loss 1 = 0.12449, loss 2 = 0.15697
  > Step 11751 (epoch 292): loss 1 = 0.10932, loss 2 = 0.14045
val eval at step 12000: map@0.50 = 0.39922 - map@0.75 = 0.10731
  > Step 12001 (epoch 298): loss 1 = 0.11482, loss 2 = 0.13069
  > Step 12251 (epoch 304): loss 1 = 0.11411, loss 2 = 0.15032
val eval at step 12500: map@0.50 = 0.44490 - map@0.75 = 0.11727
  > Step 12501 (epoch 310): loss 1 = 0.08263, loss 2 = 0.11310
  > Step 12751 (epoch 317): loss 1 = 0.08834, loss 2 = 0.14517
val eval at step 13000: map@0.50 = 0.38678 - map@0.75 = 0.09482
  > Step 13001 (epoch 323): loss 1 = 0.12303, loss 2 = 0.14090
  > Step 13251 (epoch 329): loss 1 = 0.10029, loss 2 = 0.09658
val eval at step 13500: map@0.50 = 0.38494 - map@0.75 = 0.10397
  > Step 13501 (epoch 335): loss 1 = 0.09771, loss 2 = 0.14200
  > Step 13751 (epoch 341): loss 1 = 0.09178, loss 2 = 0.14000
val eval at step 14000: map@0.50 = 0.38982 - map@0.75 = 0.12740
  > Step 14001 (epoch 348): loss 1 = 0.08046, loss 2 = 0.11726
  > Step 14251 (epoch 354): loss 1 = 0.10443, loss 2 = 0.17229
val eval at step 14500: map@0.50 = 0.42865 - map@0.75 = 0.13019
  > Step 14501 (epoch 360): loss 1 = 0.08824, loss 2 = 0.16402
  > Step 14751 (epoch 366): loss 1 = 0.08821, loss 2 = 0.14013
val eval at step 15000: map@0.50 = 0.39345 - map@0.75 = 0.10251
  > Step 15001 (epoch 372): loss 1 = 0.10864, loss 2 = 0.09668
  > Step 15251 (epoch 379): loss 1 = 0.13750, loss 2 = 0.11897
val eval at step 15500: map@0.50 = 0.42196 - map@0.75 = 0.15101
  > Step 15501 (epoch 385): loss 1 = 0.07097, loss 2 = 0.14648
  > Step 15751 (epoch 391): loss 1 = 0.09642, loss 2 = 0.13765
val eval at step 16000: map@0.50 = 0.42164 - map@0.75 = 0.13072
  > Step 16001 (epoch 397): loss 1 = 0.09091, loss 2 = 0.11144
  > Step 16251 (epoch 403): loss 1 = 0.09604, loss 2 = 0.09492
val eval at step 16500: map@0.50 = 0.42183 - map@0.75 = 0.14008
  > Step 16501 (epoch 410): loss 1 = 0.10164, loss 2 = 0.14361
  > Step 16751 (epoch 416): loss 1 = 0.09011, loss 2 = 0.13205
val eval at step 17000: map@0.50 = 0.41527 - map@0.75 = 0.16866
  > Step 17001 (epoch 422): loss 1 = 0.19539, loss 2 = 0.14225
  > Step 17251 (epoch 428): loss 1 = 0.09706, loss 2 = 0.09257
val eval at step 17500: map@0.50 = 0.43116 - map@0.75 = 0.13422
  > Step 17501 (epoch 434): loss 1 = 0.14462, loss 2 = 0.07885
  > Step 17751 (epoch 441): loss 1 = 0.08326, loss 2 = 0.08839
val eval at step 18000: map@0.50 = 0.42738 - map@0.75 = 0.13065
  > Step 18001 (epoch 447): loss 1 = 0.06855, loss 2 = 0.08846
  > Step 18251 (epoch 453): loss 1 = 0.09536, loss 2 = 0.10613
val eval at step 18500: map@0.50 = 0.42526 - map@0.75 = 0.14872
  > Step 18501 (epoch 459): loss 1 = 0.10203, loss 2 = 0.08757
  > Step 18751 (epoch 465): loss 1 = 0.05279, loss 2 = 0.14926
val eval at step 19000: map@0.50 = 0.43143 - map@0.75 = 0.15010
  > Step 19001 (epoch 472): loss 1 = 0.04985, loss 2 = 0.09000
  > Step 19251 (epoch 478): loss 1 = 0.06801, loss 2 = 0.10122
val eval at step 19500: map@0.50 = 0.46121 - map@0.75 = 0.12909
  > Step 19501 (epoch 484): loss 1 = 0.06999, loss 2 = 0.13167
  > Step 19751 (epoch 490): loss 1 = 0.11281, loss 2 = 0.17211
val eval at step 20000: map@0.50 = 0.44469 - map@0.75 = 0.13340
  > Step 20001 (epoch 496): loss 1 = 0.07044, loss 2 = 0.12094
  > Step 20251 (epoch 503): loss 1 = 0.06551, loss 2 = 0.13869
val eval at step 20500: map@0.50 = 0.44300 - map@0.75 = 0.15800
  > Step 20501 (epoch 509): loss 1 = 0.11542, loss 2 = 0.09858
  > Step 20751 (epoch 515): loss 1 = 0.08415, loss 2 = 0.11513
val eval at step 21000: map@0.50 = 0.41278 - map@0.75 = 0.14812
  > Step 21001 (epoch 521): loss 1 = 0.06285, loss 2 = 0.10020
  > Step 21251 (epoch 527): loss 1 = 0.07496, loss 2 = 0.08411
val eval at step 21500: map@0.50 = 0.41835 - map@0.75 = 0.17217
  > Step 21501 (epoch 534): loss 1 = 0.12866, loss 2 = 0.12938
  > Step 21751 (epoch 540): loss 1 = 0.06850, loss 2 = 0.09870
val eval at step 22000: map@0.50 = 0.45164 - map@0.75 = 0.14439
  > Step 22001 (epoch 546): loss 1 = 0.06477, loss 2 = 0.07151
  > Step 22251 (epoch 552): loss 1 = 0.06250, loss 2 = 0.12416
val eval at step 22500: map@0.50 = 0.41219 - map@0.75 = 0.17381
  > Step 22501 (epoch 558): loss 1 = 0.07634, loss 2 = 0.11227
  > Step 22751 (epoch 565): loss 1 = 0.04603, loss 2 = 0.07930
val eval at step 23000: map@0.50 = 0.42423 - map@0.75 = 0.10747
  > Step 23001 (epoch 571): loss 1 = 0.15275, loss 2 = 0.18059
  > Step 23251 (epoch 577): loss 1 = 0.12286, loss 2 = 0.10746
val eval at step 23500: map@0.50 = 0.46139 - map@0.75 = 0.12046
  > Step 23501 (epoch 583): loss 1 = 0.08289, loss 2 = 0.06963
  > Step 23751 (epoch 589): loss 1 = 0.05866, loss 2 = 0.09733
val eval at step 24000: map@0.50 = 0.43543 - map@0.75 = 0.11483
  > Step 24001 (epoch 596): loss 1 = 0.07207, loss 2 = 0.11838
test eval at step 24200: map@0.50 = 0.44996 - map@0.75 = 0.15891
